{
	"info": {
		"_postman_id": "fc252e05-e05f-4a12-a6c9-c613c8b9bed0",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6744678"
	},
	"item": [
		{
			"name": "Get data",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/info?id=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"info"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/info",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"info"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/info?id=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"info"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/info?id=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"info"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Register-post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n        \"firstname\": \"tes t1\",\n        \"lastname\": \"tes t2\",\n        \"hospitalname\": \"tes t3\",\n        \"addressone\": \"tes t4\",\n        \"addresstwo\": \"tes t5\",\n        \"city\": \"te st6\",\n        \"country\": \"tes t7\",\n        \"pincode\": \"tes t8\",\n        \"email\": \"hello 1@gmail.com\",\n        \"phonenumber\": \"te st\",\n        \"password\": \"test 6\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4002/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4002",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\n    \"provider_id\":\"test 1\",\n    \"businessname\":\"test2\",\n    \"practicename\":\"test3\",\n    \"address1\":\"test4\",\n    \"city\":\"test5 \",\n    \"state\":\"test 6\",\n    \"zip_code\":\"test 7\",\n    \"telephonenumber\":\"test 8\",\n    \"specialitieslist\":\"test 9\",\n    \"supplieslist\":\"test 10\",\n    \"Unit_Price\":\" test 11\",\n    \"Quantity\":\"test 12\",\n    \"days_in_store\":\"test 13\",\n    \"Date_Purchased\":\"23/4/23\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4011/api/product/add",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4011",
					"path": [
						"api",
						"product",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "addProd",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"provider_id\":\"test 1\",\n    \"businessname\":\"test2\",\n    \"practicename\":\"test3\",\n    \"address1\":\"test4\",\n    \"city\":\"test5 \",\n    \"state\":\"test 6\",\n    \"zip_code\":\"test 7\",\n    \"telephonenumber\":\"test 8\",\n    \"specialitieslist\":\"test 9\",\n    \"supplieslist\":\"test 10\",\n    \"Unit_Price\":\" test 11\",\n    \"Quantity\":\"test 12\",\n    \"days_in_store\":\"test 13\",\n    \"Date_Purchased\":\"23/4/23\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4012/api/product/add",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4012",
					"path": [
						"api",
						"product",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "getProdbyprovider",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"provider_id\":\"test 1\",\n    \"businessname\":\"test2\",\n    \"practicename\":\"test3\",\n    \"address1\":\"test4\",\n    \"city\":\"test5 \",\n    \"state\":\"test 6\",\n    \"zip_code\":\"test 7\",\n    \"telephonenumber\":\"test 8\",\n    \"specialitieslist\":\"test 9\",\n    \"supplieslist\":\"test 10\",\n    \"Unit_Price\":\" test 11\",\n    \"Quantity\":\"test 12\",\n    \"days_in_store\":\"test 13\",\n    \"Date_Purchased\":\"23/4/23\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4012/api/product/get/test 1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4012",
					"path": [
						"api",
						"product",
						"get",
						"test 1"
					]
				}
			},
			"response": []
		},
		{
			"name": "search",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"provider_id\":\"test 1\",\n    \"businessname\":\"test2\",\n    \"practicename\":\"test3\",\n    \"address1\":\"testing\",\n    \"city\":\"test5 \",\n    \"state\":\"test 6\",\n    \"zip_code\":\"test 7\",\n    \"telephonenumber\":\"test 8\",\n    \"specialitieslist\":\"testing\",\n    \"supplieslist\":\"test 10\",\n    \"Unit_Price\":\" test 11\",\n    \"Quantity\":\"test 12\",\n    \"days_in_store\":\"test 13\",\n    \"Date_Purchased\":\"23/4/23\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4012/api/product/search?find=test2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4012",
					"path": [
						"api",
						"product",
						"search"
					],
					"query": [
						{
							"key": "find",
							"value": "test2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "updateproduct",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"provider_id\":\"test 1\",\n    \"businessname\":\"test2\",\n    \"practicename\":\"test3\",\n    \"address1\":\"testing\",\n    \"city\":\"test5 \",\n    \"state\":\"test 6\",\n    \"zip_code\":\"test 7\",\n    \"telephonenumber\":\"test 8\",\n    \"specialitieslist\":\"testing\",\n    \"supplieslist\":\"test 10\",\n    \"Unit_Price\":\" test 11\",\n    \"Quantity\":\"test 12\",\n    \"days_in_store\":\"test 13\",\n    \"Date_Purchased\":\"23/4/23\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4012/api/product/661f0ec725b3ff0de9da9b8a",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4012",
					"path": [
						"api",
						"product",
						"661f0ec725b3ff0de9da9b8a"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}