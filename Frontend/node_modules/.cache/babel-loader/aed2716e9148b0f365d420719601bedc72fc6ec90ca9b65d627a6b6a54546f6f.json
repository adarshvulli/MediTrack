{"ast":null,"code":"var _jsxFileName = \"/Users/jarvis/Library/CloudStorage/OneDrive-IndianaUniversity/sem2/ADT/finalproject/react/Frontend/src/components/TotalQuantityBySupplyType.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\n// import { log } from 'console';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TotalQuantityBySupplyType = () => {\n  // State variables for labels and quantities\n  const [labels, setLabels] = useState([]);\n  const [quantities, setQuantities] = useState([]);\n\n  // Fetch data from the API on component mount\n  useEffect(() => {\n    // console.log(\"c\")\n    fetch('http://localhost:4012/api/supplies/total-quantity-by-supply-type').then(response => {\n      if (!response.ok) {\n        // console.log(\"error\",response)\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      // console.log(\"success\",response)\n      return response.json();\n    }).then(data => {\n      // Extract labels and quantities from the response data\n      const newLabels = data.map(item => item._id);\n      const newQuantities = data.map(item => item.total_quantity);\n      // Update state variables\n      setLabels(newLabels);\n      setQuantities(newQuantities);\n    }).catch(error => {\n      // console.error('Error fetching data:', error);\n    });\n  }, []);\n\n  // Define data for the bar chart\n  const barData = {\n    labels: labels,\n    datasets: [{\n      label: 'Supply Type',\n      data: quantities,\n      backgroundColor: 'rgba(54, 162, 235, 0.6)',\n      borderColor: 'rgba(54, 162, 235, 1)',\n      borderWidth: 1\n    }]\n  };\n\n  // Options for the bar chart\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontWeight: 600,\n        fontSize: \"1.5em\",\n        marginBottom: \"2em\"\n      },\n      children: \"Total Quantity by Supply Type\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: barData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\nexport default TotalQuantityBySupplyType;","map":{"version":3,"names":["React","useState","useEffect","Bar","jsxDEV","_jsxDEV","TotalQuantityBySupplyType","labels","setLabels","quantities","setQuantities","fetch","then","response","ok","Error","status","json","data","newLabels","map","item","_id","newQuantities","total_quantity","catch","error","barData","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","children","style","fontWeight","fontSize","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/jarvis/Library/CloudStorage/OneDrive-IndianaUniversity/sem2/ADT/finalproject/react/Frontend/src/components/TotalQuantityBySupplyType.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\n// import { log } from 'console';\n\nconst TotalQuantityBySupplyType = () => {\n    // State variables for labels and quantities\n    const [labels, setLabels] = useState([]);\n    const [quantities, setQuantities] = useState([]);\n\n    // Fetch data from the API on component mount\n    useEffect(() => {\n        // console.log(\"c\")\n        fetch('http://localhost:4012/api/supplies/total-quantity-by-supply-type')\n            .then(response => {\n                if (!response.ok) {\n                    // console.log(\"error\",response)\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                // console.log(\"success\",response)\n                return response.json();\n            })\n            .then(data => {\n                // Extract labels and quantities from the response data\n                const newLabels = data.map(item => item._id);\n                const newQuantities = data.map(item => item.total_quantity);\n                // Update state variables\n                setLabels(newLabels);\n                setQuantities(newQuantities);\n            })\n            .catch(error => {\n                // console.error('Error fetching data:', error);\n            });\n    }, []);\n\n    // Define data for the bar chart\n    const barData = {\n        labels: labels,\n        datasets: [\n            {\n                label: 'Supply Type',\n                data: quantities,\n                backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                borderColor: 'rgba(54, 162, 235, 1)',\n                borderWidth: 1,\n            },\n        ],\n    };\n\n    // Options for the bar chart\n    const options = {\n        scales: {\n            y: {\n                beginAtZero: true,\n            },\n        },\n    };\n\n    return (\n        <div>\n            <h2 style={{fontWeight:600, fontSize:\"1.5em\", marginBottom:\"2em\"}}>Total Quantity by Supply Type</h2>\n            <Bar data={barData} options={options} />\n        </div>\n    );\n};\n\nexport default TotalQuantityBySupplyType;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAO,eAAe;AACtB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;EACpC;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACZ;IACAS,KAAK,CAAC,kEAAkE,CAAC,CACpEC,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd;QACA,MAAM,IAAIC,KAAK,CAAE,uBAAsBF,QAAQ,CAACG,MAAO,EAAC,CAAC;MAC7D;MACA;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;MACV;MACA,MAAMC,SAAS,GAAGD,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;MAC5C,MAAMC,aAAa,GAAGL,IAAI,CAACE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,cAAc,CAAC;MAC3D;MACAhB,SAAS,CAACW,SAAS,CAAC;MACpBT,aAAa,CAACa,aAAa,CAAC;IAChC,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAI;MACZ;IAAA,CACH,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,OAAO,GAAG;IACZpB,MAAM,EAAEA,MAAM;IACdqB,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,aAAa;MACpBX,IAAI,EAAET,UAAU;MAChBqB,eAAe,EAAE,yBAAyB;MAC1CC,WAAW,EAAE,uBAAuB;MACpCC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC;;EAED;EACA,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCC,WAAW,EAAE;MACjB;IACJ;EACJ,CAAC;EAED,oBACI/B,OAAA;IAAAgC,QAAA,gBACIhC,OAAA;MAAIiC,KAAK,EAAE;QAACC,UAAU,EAAC,GAAG;QAAEC,QAAQ,EAAC,OAAO;QAAEC,YAAY,EAAC;MAAK,CAAE;MAAAJ,QAAA,EAAC;IAA6B;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrGxC,OAAA,CAACF,GAAG;MAACe,IAAI,EAAES,OAAQ;MAACM,OAAO,EAAEA;IAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEd,CAAC;AAED,eAAevC,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}